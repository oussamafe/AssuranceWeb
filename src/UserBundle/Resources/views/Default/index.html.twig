{% extends 'baseAdmin.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <style>
        #chartdiv {
            width: 100%;
            height: 500px;
        }
    </style>

    <!-- Resources -->
    <script src="{{ asset('jQuery/jquery-3.3.1.js') }}"></script>
    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/frozen.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

{% endblock %}
{% block supcontent %}
    <div class="kt-subheader   kt-grid__item" id="kt_subheader">
        <div class="kt-subheader__main">
            <h3 class="kt-subheader__title">
                Index </h3>
            <span class="kt-subheader__separator kt-hidden"></span>
        </div>
    </div>
{% endblock %}
{% block content %}

    <div class="row row-full-height">
        <div class="col-sm-12 col-md-12 col-lg-6">
            <div class="kt-portlet kt-portlet--height-fluid-half kt-portlet--border-bottom-brand">
                <div class="kt-portlet__body kt-portlet__body--fluid">
                    <div class="kt-widget26">
                        <div class="kt-widget26__content">
                            <span class="kt-widget26__number">{{ nbnew }}</span>
                            <span class="kt-widget26__desc">Nombre De Nouveaux Clients Lors Des 7 Derniers Jours</span>
                        </div>
                        <div class="kt-widget26__chart" style="height:100px; width: 230px;">
                            <div class="chartjs-size-monitor">
                                <div class="chartjs-size-monitor-expand">
                                    <div class=""></div>
                                </div>
                                <div class="chartjs-size-monitor-shrink">
                                    <div class=""></div>
                                </div>
                            </div>
                            <canvas id="kt_chart_quick_stats_1" width="230" height="115" class="chartjs-render-monitor"
                                    style="display: block; width: 230px; height: 115px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="kt-space-20"></div>
            <div class="kt-portlet kt-portlet--height-fluid-half kt-portlet--border-bottom-danger">
                <div class="kt-portlet__body kt-portlet__body--fluid">
                    <div class="kt-widget26">
                        <div class="kt-widget26__content">
                            <span class="kt-widget26__number">{{ thread.numComments }}</span>
                            <span class="kt-widget26__desc"><b><a href ="{{ path('admin_actualite_show', { 'id': articles.id }) }}">{{ articles.titre }}</a></b> est l'article avec le plus de commentaires : <b>{{ thread.numComments }}</b></span>
                        </div>
                        <div class="kt-widget26__chart" style="height:100px; width: 230px;">
                            <div class="chartjs-size-monitor">
                                <div class="chartjs-size-monitor-expand">
                                    <div class=""></div>
                                </div>
                                <div class="chartjs-size-monitor-shrink">
                                    <div class=""></div>
                                </div>
                            </div>
                            <canvas id="kt_chart_quick_stats_2" width="230" height="115" class="chartjs-render-monitor"
                                    style="display: block; width: 230px; height: 115px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-6">
            <div class="kt-portlet kt-portlet--height-fluid-half kt-portlet--border-bottom-success">
                <div class="kt-portlet__body kt-portlet__body--fluid">
                    <div class="kt-widget26">
                        <div class="kt-widget26__content">
                            <span class="kt-widget26__number">{{ nblog }}</span>
                            <span class="kt-widget26__desc">Nombres D'utilisateurs Connect√©s </span>
                        </div>
                        <div class="kt-widget26__chart" style="height:100px; width: 230px;">
                            <div class="chartjs-size-monitor">
                                <div class="chartjs-size-monitor-expand">
                                    <div class=""></div>
                                </div>
                                <div class="chartjs-size-monitor-shrink">
                                    <div class=""></div>
                                </div>
                            </div>
                            <canvas id="kt_chart_quick_stats_3" width="230" height="115" class="chartjs-render-monitor"
                                    style="display: block; width: 230px; height: 115px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="kt-space-20"></div>
            <div class="kt-portlet kt-portlet--height-fluid-half kt-portlet--border-bottom-warning">
                <div class="kt-portlet__body kt-portlet__body--fluid">
                    <div class="kt-widget26">
                        <div class="kt-widget26__content">
                            <span class="kt-widget26__number">{{ plus.views }}</span>
                            <span class="kt-widget26__desc"><b><a href ="{{ path('admin_actualite_show', { 'id': plus.id }) }}">{{ plus.titre }}</a></b> est l'article le plus vu avec <b>{{ plus.views }}</b> vues </span>
                        </div>
                        <div class="kt-widget26__chart" style="height:100px; width: 230px;">
                            <div class="chartjs-size-monitor">
                                <div class="chartjs-size-monitor-expand">
                                    <div class=""></div>
                                </div>
                                <div class="chartjs-size-monitor-shrink">
                                    <div class=""></div>
                                </div>
                            </div>
                            <canvas id="kt_chart_quick_stats_4" width="230" height="115" class="chartjs-render-monitor"
                                    style="display: block; width: 230px; height: 115px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="kt-portlet kt-portlet--height-fluid">
            <div class="kt-widget14">
                <div class="kt-widget14__header">
                    <h3 class="kt-widget14__title">
                        Localisation Des Clients
                    </h3>
                </div>
                <div class="kt-widget14__content">
                    <div id="chartdiv"></div>
                </div>
            </div>
        </div>
    </div>

    {% set data = {} %}
    {% for key, value in location %}
        {% set data = data|merge([{
            'country': key,
            'value': value,
        }]) %}
    {% endfor %}



    <script>
        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end

        var chart = am4core.create("chartdiv", am4charts.PieChart);
        chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

        chart.data = {{ data|json_encode|raw }} ;
        chart.radius = am4core.percent(70);
        chart.innerRadius = am4core.percent(40);
        chart.startAngle = 180;
        chart.endAngle = 360;

        var series = chart.series.push(new am4charts.PieSeries());
        series.dataFields.value = "value";
        series.dataFields.category = "country";

        series.slices.template.cornerRadius = 10;
        series.slices.template.innerCornerRadius = 7;
        series.slices.template.draggable = true;
        series.slices.template.inert = true;
        series.alignLabels = false;

        series.hiddenState.properties.startAngle = 90;
        series.hiddenState.properties.endAngle = 90;

        chart.legend = new am4charts.Legend();
    </script>


{#<script>
    /**
    * ---------------------------------------
    * This demo was created using amCharts 4.
    *
    * For more information visit:
    * https://www.amcharts.com/
    *
    * Documentation is available at:
    * https://www.amcharts.com/docs/v4/
    * ---------------------------------------
    */

    // Themes begin
    am4core.useTheme(am4themes_frozen);
    am4core.useTheme(am4themes_animated);
    // Themes end

    var data = [{
    "country": "Dummy",
    "disabled": true,
    "litres": 1000,
    "color": am4core.color("#dadada"),
    "opacity": 0.3,
    "strokeDasharray": "4,4"
    }, {
    "country": "Tunisie",
    "litres": {{ location['tn'] }}
    },{
        "country": "France",
        "litres": {{ location['fr'] }}
    }, {
    "country": "Autres Pays",
    "litres": {{ location['other'] }}
    }];

    var data = {{ data|json_encode|raw }} ;


    // cointainer to hold both charts
    var container = am4core.create("chartdiv", am4core.Container);
    container.width = am4core.percent(100);
    container.height = am4core.percent(100);
    container.layout = "horizontal";

    container.events.on("maxsizechanged", function () {
    chart1.zIndex = 0;
    separatorLine.zIndex = 1;
    dragText.zIndex = 2;
    chart2.zIndex = 3;
    })

    var chart1 = container.createChild(am4charts.PieChart);
    chart1 .fontSize = 11;
    chart1.hiddenState.properties.opacity = 0; // this makes initial fade in effect
    chart1.data = data;
    chart1.radius = am4core.percent(70);
    chart1.innerRadius = am4core.percent(40);
    chart1.zIndex = 1;

    var series1 = chart1.series.push(new am4charts.PieSeries());
    series1.dataFields.value = "litres";
    series1.dataFields.category = "country";
    series1.colors.step = 2;
    series1.alignLabels = false;
    series1.labels.template.bent = true;
    series1.labels.template.radius = 3;
    series1.labels.template.padding(0,0,0,0);

    var sliceTemplate1 = series1.slices.template;
    sliceTemplate1.cornerRadius = 5;
    sliceTemplate1.draggable = true;
    sliceTemplate1.inert = true;
    sliceTemplate1.propertyFields.fill = "color";
    sliceTemplate1.propertyFields.fillOpacity = "opacity";
    sliceTemplate1.propertyFields.stroke = "color";
    sliceTemplate1.propertyFields.strokeDasharray = "strokeDasharray";
    sliceTemplate1.strokeWidth = 1;
    sliceTemplate1.strokeOpacity = 1;

    var zIndex = 5;

    sliceTemplate1.events.on("down", function (event) {
    event.target.toFront();
    // also put chart to front
    var series = event.target.dataItem.component;
    series.chart.zIndex = zIndex++;
    })

    series1.ticks.template.disabled = true;

    sliceTemplate1.states.getKey("active").properties.shiftRadius = 0;

    sliceTemplate1.events.on("dragstop", function (event) {
    handleDragStop(event);
    })

    // separator line and text
    var separatorLine = container.createChild(am4core.Line);
    separatorLine.x1 = 0;
    separatorLine.y2 = 300;
    separatorLine.strokeWidth = 3;
    separatorLine.stroke = am4core.color("#dadada");
    separatorLine.valign = "middle";
    separatorLine.strokeDasharray = "5,5";


    var dragText = container.createChild(am4core.Label);
    dragText.text = "";
    dragText.rotation = 90;
    dragText.valign = "middle";
    dragText.align = "center";
    dragText.paddingBottom = 5;

    // second chart
    var chart2 = container.createChild(am4charts.PieChart);
    chart2.hiddenState.properties.opacity = 0; // this makes initial fade in effect
    chart2 .fontSize = 11;
    chart2.radius = am4core.percent(70);
    chart2.data = data;
    chart2.innerRadius = am4core.percent(40);
    chart2.zIndex = 1;

    var series2 = chart2.series.push(new am4charts.PieSeries());
    series2.dataFields.value = "litres";
    series2.dataFields.category = "country";
    series2.colors.step = 2;

    series2.alignLabels = false;
    series2.labels.template.bent = true;
    series2.labels.template.radius = 3;
    series2.labels.template.padding(0,0,0,0);
    series2.labels.template.propertyFields.disabled = "disabled";

    var sliceTemplate2 = series2.slices.template;
    sliceTemplate2.copyFrom(sliceTemplate1);

    series2.ticks.template.disabled = true;

    function handleDragStop(event) {
    var targetSlice = event.target;
    var dataItem1;
    var dataItem2;
    var slice1;
    var slice2;

    if (series1.slices.indexOf(targetSlice) != -1) {
    slice1 = targetSlice;
    slice2 = series2.dataItems.getIndex(targetSlice.dataItem.index).slice;
    }
    else if (series2.slices.indexOf(targetSlice) != -1) {
    slice1 = series1.dataItems.getIndex(targetSlice.dataItem.index).slice;
    slice2 = targetSlice;
    }


    dataItem1 = slice1.dataItem;
    dataItem2 = slice2.dataItem;

    var series1Center = am4core.utils.spritePointToSvg({ x: 0, y: 0 }, series1.slicesContainer);
    var series2Center = am4core.utils.spritePointToSvg({ x: 0, y: 0 }, series2.slicesContainer);

    var series1CenterConverted = am4core.utils.svgPointToSprite(series1Center, series2.slicesContainer);
    var series2CenterConverted = am4core.utils.svgPointToSprite(series2Center, series1.slicesContainer);

    // tooltipY and tooltipY are in the middle of the slice, so we use them to avoid extra calculations
    var targetSlicePoint = am4core.utils.spritePointToSvg({ x: targetSlice.tooltipX, y: targetSlice.tooltipY }, targetSlice);

    if (targetSlice == slice1) {
    if (targetSlicePoint.x > container.pixelWidth / 2) {
    var value = dataItem1.value;

    dataItem1.hide();

    var animation = slice1.animate([{ property: "x", to: series2CenterConverted.x }, { property: "y", to: series2CenterConverted.y }], 400);
    animation.events.on("animationprogress", function (event) {
    slice1.hideTooltip();
    })

    slice2.x = 0;
    slice2.y = 0;

    dataItem2.show();
    }
    else {
    slice1.animate([{ property: "x", to: 0 }, { property: "y", to: 0 }], 400);
    }
    }
    if (targetSlice == slice2) {
    if (targetSlicePoint.x < container.pixelWidth / 2) {

    var value = dataItem2.value;

    dataItem2.hide();

    var animation = slice2.animate([{ property: "x", to: series1CenterConverted.x }, { property: "y", to: series1CenterConverted.y }], 400);
    animation.events.on("animationprogress", function (event) {
    slice2.hideTooltip();
    })

    slice1.x = 0;
    slice1.y = 0;
    dataItem1.show();
    }
    else {
    slice2.animate([{ property: "x", to: 0 }, { property: "y", to: 0 }], 400);
    }
    }

    toggleDummySlice(series1);
    toggleDummySlice(series2);

    series1.hideTooltip();
    series2.hideTooltip();
    }

    function toggleDummySlice(series) {
    var show = true;
    for (var i = 1; i < series.dataItems.length; i++) {
    var dataItem = series.dataItems.getIndex(i);
    if (dataItem.slice.visible && !dataItem.slice.isHiding) {
    show = false;
    }
    }

    var dummySlice = series.dataItems.getIndex(0);
    if (show) {
    dummySlice.show();
    }
    else {
    dummySlice.hide();
    }
    }

    series2.events.on("datavalidated", function () {

    var dummyDataItem = series2.dataItems.getIndex(0);
    dummyDataItem.show(0);
    dummyDataItem.slice.draggable = false;
    dummyDataItem.slice.tooltipText = undefined;

    for (var i = 1; i < series2.dataItems.length; i++) {
    series2.dataItems.getIndex(i).hide(0);
    }
    })

    series1.events.on("datavalidated", function () {
    var dummyDataItem = series1.dataItems.getIndex(0);
    dummyDataItem.hide(0);
    dummyDataItem.slice.draggable = false;
    dummyDataItem.slice.tooltipText = undefined;
    })
</script>#}
{% endblock %}
